---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: prometheus-crds
  namespace: prometheus
spec:
  interval: 30m
  chart:
    spec:
      chart: prometheus-operator-crds
      version: "14.0.0"
      sourceRef:
        kind: HelmRepository
        name: prometheus
        namespace: prometheus
      interval: 12h

---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: prometheus
  namespace: prometheus
spec:
  dependsOn:
    - name: prometheus-crds
  interval: 30m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: "63.1.0"
      sourceRef:
        kind: HelmRepository
        name: prometheus
        namespace: prometheus
      interval: 12h
  values:
    kubeProxy:
      service:
        selector:
          component: kube-proxy
    prometheus:
      enabled: true
      windowsMonitoring:
        enabled: true
      service:
        enabled: true
        loadBalancerIP: "10.1.50.130"
        type: LoadBalancer
      prometheusSpec:
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: longhorn
              accessModes:
                - ReadWriteOnce
              resources:
                requests:
                  storage: 50Gi
        podMonitorSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        ruleSelectorNilUsesHelmValues: false
      externalUrl: https://prometheus.${domain}
    alertmanager:
      enabled: true
      service:
        enabled: true
        loadBalancerIP: "10.1.50.131"
        type: LoadBalancer
      config:
        global:
          resolve_timeout: 1m
          slack_api_url: "https://hooks.slack.com/services/null"
        route:
          receiver: "slack-notifications"
          group_by:
            - job
        receivers:
          - name: "null"
          - name: "slack-notifications"
            slack_configs:
              - channel: "#alertmanager"
                send_resolved: true
                icon_url: https://avatars3.githubusercontent.com/u/3380462
                title: |-
                  [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ .CommonLabels.alertname }} for {{ .CommonLabels.job }}
                  {{- if gt (len .CommonLabels) (len .GroupLabels) -}}
                    {{" "}}(
                    {{- with .CommonLabels.Remove .GroupLabels.Names }}
                      {{- range $index, $label := .SortedPairs -}}
                        {{ if $index }}, {{ end }}
                        {{- $label.Name }}="{{ $label.Value -}}"
                      {{- end }}
                    {{- end -}}
                    )
                  {{- end }}
                text: >-
                  {{ range .Alerts -}}
                  *Alert:* {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}

                  *Description:* {{ .Annotations.description }}

                  *Details:*
                    {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
                    {{ end }}
                  {{ end }}
      alertmanagerSpec:
        replicas: 1
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: longhorn
              accessModes:
                - ReadWriteOnce
              resources:
                requests:
                  storage: 50Gi
      externalUrl: https://alertmanager.${domain}
    grafana:
      replicas: 1
      service:
        enabled: true
        loadBalancerIP: "10.1.50.132"
        type: LoadBalancer
      persistence:
        type: pvc
        enabled: true
        storageClassName: longhorn
      adminUser: admin
      adminPassword: admin

---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: blackbox-exporter
  namespace: prometheus
spec:
  interval: 30m
  chart:
    spec:
      chart: prometheus-blackbox-exporter
      version: "9.0.0"
      sourceRef:
        kind: HelmRepository
        name: prometheus
        namespace: prometheus
      interval: 12h
  values:
    replicas: 2
    config:
      modules:
        http:
          prober: http
          timeout: 5s
          http:
            valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
            follow_redirects: true
            preferred_ip_protocol: "ip4"
        icmp:
          prober: icmp
          icmp:
            preferred_ip_protocol: ip4
        tcp:
          prober: tcp
          tcp:
            preferred_ip_protocol: ip4
